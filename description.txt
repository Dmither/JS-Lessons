F12 - відкрити панель розробника в браузері

Код на JS пишеться в Head або вкінці Body (рекомендовано) напряму
    або підключенням файлу js (<script src='script.js'></script>)

console.log(); - команда виводу на консоль

Кожна команда починається із нового рядка та закінчуватись ";"
Для підключення нових функцій спочатку підключаємо строгий режим
    "use strict", який забороняє об'яву змінних без ключового слова

Об'ява змінної:
    let - КС об'яви змінної (lowCamelCase)
    var - КС змінної, яку видно поза блоком кода (крім ф-цій)
    const - КС об'яви константи (постійної, незмінної) (UPPER_CASE)

JS - динамічно-типізована МП, тип змінної міняється в процесі
    undefined - невизначена змінна (неініціалізована)
    null - визначена змінна без інформації
    boolean - змінна логічного типу (true / false)
    number - цілі та дробові числа (Infinity, -Infinity, NaN)
    bigInt - дуже великі числа (1234567890123456789n)
    string - строкова змінна ("" '' ``)
    object - змінна складної строки ({name: "", age: 23})
    symbol - унікальний ідентифікатор об'єкта
    function - споріднений до object тип для об'яви ф-цій
typeof(variable) - поверне тип змінної
Явне перетворення змінних відбувається за доп. одноіменних ф-цій:
    let str22 = String(22);     let num22 = Number(str22);

Оператори: математичні, присвоєння, порівняльні, логічні
    математичні "+" "-" "*" "/" "%" "**";
        (бінарний "+" зі строкою - конкатенація 2+"2"="22" "4"-2=2
        всі інші оператори працюють з числами   22+""="22"  +"2"=2
    присвоєння: "=" "+=" "-=" "*=" "/=" "%=" "++" "--"
        (інкремент та дикремент працює лише зі змінними)
    порівняння: ">" ">=" "<" "<=" "==" "!=" "===" "!=="
        (порівняння строк посимвольно в алфавітному порядку; А < а;
        порівняння різних типів з числами приводить їх до числа;
        строге порівняння порівнює без приведення типів;
        undefined == null; undefined !== null)
    логічні: "&&" "||" "!" "??"
        (при двох нелогічних || поверне першу true, && - останню
        true або першу false: 24 || 46 = 24; 45 && 24 = 24;
        нелогічні з ! переводяться в логічні; !! перетворює в бул;
        ?? повертає перший, якщо він не undefined або null)

Умовні оператори: if, else, else if, ?
    (використання "?":  {res = (boolean) ? firstRes : secondRes} )

Цикли: while, do...while, for
    робота цикла for (let i = 0; i < 5; i++){}; 
    break та continue керує потоком в циклі;
    для переривання верхнього цикла з нижнього ставиться мітка:
        markName: for (;;){
            for(;;){
                break markName;
                }
            }

Функції об'являються за допомогою function або ф-ціонального виразу
    називаються як дієсловоПредмет (showMessage)
    Об'ява ф-ції: function funcName([params]){return}
        може бути визвана до об'яви
    Ф-й вираз: let funcName = function([params]){return};
        може бути визвана поза блоком кода
    Ф-я-стрілка: let funcName = ([params]) => return;
        підвид ф-го виразу

Планування ф-й: setTimeout та setInterval
    ф-ї setTimeout та setInterval відкладають лише цільову ф-ю,
        що не впливає на основний потік виконання
    setTimeout(func, time, [params]) - викликає разово через time
        setTimeout(showMessage, 3000, "message") - 
            showMessage("message") через 3000мс (3с)
    clearTimeout(variable) - зупиняє таймер, присвоєний змінній 
    setInterval(func, time, [params]) - багаторазово через time
        більш точну затримку дає рекурсивний setTimeout
    clearInterval(variable) - зупиняє інтервал

Створення та використання об'єкта:
    конструктор об'єкта:    new Object();
    літерал об'єкта:        {};
    Властивості об'єкта {key: value, name: "Carl", age: 30,};
    До всього об'єкта звертаються за іменем (console.log(object1));
    До поля об'єкта по імені.полю (console.log(object1.name));
        Для визова поля можна використовувати змінну з іменем поля:
            let key = "name";
            console.log(object1[key]);
    Додавання полів об'єкту можна ініціалізацією object1.sex = male;
    Видалення поля - delete object1.sex;
    Зміна значення поля - object1.name = newName;
    Копія об'єкта, копія полів об'єкта, дописування полями іншого:
        Object.assign(кінцевий об'єкт, об'єкт або поля для копіювання)
    Перевірка наявності поля: 
        if(object1.name) - при відсутності (undefined) поверне false
        object1?.address?.street - перевіряє наявність по ланцюгу
        if("name" in object1) - поверне true при наявності поля

