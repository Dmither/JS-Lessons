Браузерне оточення має глобальний об'єкт Window, що має методи для
    керування вікном браузера і вміщає в себе JavaScript, BOM та DOM
Browser object model - працює зі всім, крім документів
    Методи комунікації з користувачем: alert(), confirm(), prompt()

Document object model - представляє весь вміст HTML-сторінки в 
    вигляді об'єктів, які можна змінювати. Вкладені - вузли-потомки,
    текст і коментарі також об'єкти.
Всі операції починаються із точки входу - об'єкта document.
Верхні елементи дерева доступні як властивості document:
    const html = document.documentElement,
        head = document.head,
        body = document.body
Далі можна використовувати ці об'єкти як відправну точку навігації:
    *вузли вміщають елементи, текст, коментарі та ін
Навігація по вузлам (для поточного елемента):
    .firstChild .lastChild перший та останній дочірній вузли
    .childNodes - виведе список всії дочірніх вузлів,
    .hasChildNodes() - виведе чи є дочірні вузли,
    .previousSibling .nextSibling попередній та наступний вузол,
    .parentNode - батьківський вузол
Навігація по елементам (для поточного елемента):
    .children - виведе колекцію дочірніх елементів,
    .firstElementChild .lastElementChild .parentElement
    .previousElementSibling .nextElementSibling те ж по елементам
Пошук по дереву вузлів (для вузла document або поточного):
    .querySelectorAll(selector) пошук по селектору (тег, клас, ect.),
    .querySelector(selector) пошук першого елемента по селектору,
    Методи групи getElementsBy... створюють живу колекцію,
    .closest(selector) шукає найближчого предка,
    .matches(selector) перевіряє елемент на відповідність селектору
Зміни документів:
    .innerHTML - повертає вміст об'єкта разом з тегами, дає змогу
        змінювати вміст присвоєнням (=`<p>${oldValue}</p><p>New</p>`)
    .outerHTML - те ж, з об'єктом включно, можна замінити об'єкт
        та зберегти старий в змінну
    .textContent - повертає лише текстовий контент, вставляє строку
    .data - виведе текст вузла (н-д коментаря)
Створення елементів: document.createElement('tag')
Створення текстового вузла: document.createTextNode('Text')
Вставка елементів в документ (для поточного елементу):
    вставка елемента або тексту (безпечно):
        .before([e]) .after([e]) вставка до/після поточного;
        .prepend([e]) .append([e]) всередину на початок/в кінець.
    вставка контенту у вказане місце:
        .insertAjacentHTML('place', 'content) HTML-коду,
        .insertAjacentText('place', 'content) тексту,
        .insertAjacentElement('place', 'content') елементу
        place: beforebegin - перед поточним елементом;
            afterbegin - перед контентом поточного елемента;
            beforeend - після контенту поточного елемента;
            afterend - після поточного елемента;
Переміщення проводиться методами вставки, які автоматично видаляють
    елементи х їх старого місця.
Клонування вузла (зі вмістом): element.cloneNode(true)
Видалення об'єкта: element.remove()

Керування класами CSS (для елемента): 
    .className повертає клас, присвоєння значень перезаписують клас
    .classList повертає список класів, має ряд методів:
        add(), remove(), contains(), toggle() - (if(!contains) add())
Керування стилями (для елемента):
    .style.[prop] повертає або записує значення властивості елемента
    (elem.style.color = "red"; elem.style.marginBottom = "15px")
    (отримати значення властивості елемента можна тільки якщо воно
    записане в атрибуті style html-тега)
    .style.cssText = `...`; записати декілька властивостей (сss-код)
    .getComputedStyle(element) повертає вирахувані стилі елемента
        для елементів з непрописаними стилями, псевдо-елементів
        
У різних елементів є різні властивості. Повний список властивостей
    елемента можна отримати командою console.dir(element)
Перевірити наявність певного атрибута elem.hasAttribute('name');
Отримати значення певного атрибута elem.getAttribute('name');
Встановити значення певного атрибута elem.setAttribute('name', 'val');
Видалити певний атрибут elem.removeAttribute('name');